import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios'
import { Client, Issuer, TokenSet, TokenSetParameters } from 'openid-client'
import { CurrentConfig } from './models/App/CurrentConfig'
import { SkolengoResponse } from './models/Globals'
import { School } from './models/School/School'
import { User, UserIncluded } from './models/App/User'
import { SchoolInfo, SchoolInfoIncluded } from './models/School/SchoolInfo'
import { AuthConfig } from './models/Auth'
import { Evaluation, EvaluationIncluded } from './models/Evaluation/Evaluation'
import { EvaluationDetail, EvaluationDetailIncluded } from './models/Evaluation/EvaluationDetail'
import { EvaluationSettings, EvaluationSettingsIncluded } from './models/Evaluation/EvaluationSettings'
import { UsersMailSettings, UsersMailSettingsIncluded } from './models/Messagerie/UsersMailSettings'
import { Communication, CommunicationIncluded } from './models/Messagerie/Communication'
import { Participation, ParticipationIncluded } from './models/Messagerie/Participation'
import { HomeworkAssignment, HomeworkAssignmentIncluded } from './models/Homework/HomeworkAssignment'
export { TokenSet } from 'openid-client'
const BASE_URL = 'https://api.skolengo.com/api/v1/bff-sko-app'

const OID_CLIENT_ID = 'U2tvQXBwLlByb2QuMGQzNDkyMTctOWE0ZS00MWVjLTlhZjktZGY5ZTY5ZTA5NDk0' // base64 du client ID de l'app mobile
const OID_CLIENT_SECRET = 'N2NiNGQ5YTgtMjU4MC00MDQxLTlhZTgtZDU4MDM4NjkxODNm' // base64 du client Secret de l'app mobile

/**
 * Support non officiel de l'API de la nouvelle application mobile Skolengo.
 * Pour utiliser cette librairie, il est n√©cessaire de s'authentifier aupr√®s des serveurs de Skolengo. Pour obtenir des jetons de connexion, vous pouvez utiliser [scolengo-token](https://github.com/maelgangloff/scolengo-token).
 * Ce module est destin√© √† devenir le successeur de [kdecole-api](https://github.com/maelgangloff/kdecole-api) dans l'√©ventualit√© o√π l'acc√®s √† l'ancienne API serait d√©finitivement clos.
 *
 *
 * Pour participer et se tenir inform√©, **rejoins le serveur Discord: https://discord.gg/9u69mxsFT6**
 *
 * **Remarques importantes:**
 *  - Il est clairement mentionn√© que cette librairie est n'est pas officielle.
 *  - Ce module n'est pas une contrefa√ßon car il n'existe pas de module similaire √©dit√© officiellement.
 *  - Les utilisateurs ne peuvent acc√©der qu'√† leurs propres donn√©es. Ils sont soumis au m√™me processus d'authentification que celui impl√©ment√© dans l'application.
 *  - Les donn√©es des utilisateurs ne sont pas davantage expos√©es puisqu'un utilisateur ne peut acc√©der qu'√† ses propres donn√©es. Personne n'a le contr√¥le sur cette limitation qui est inh√©rente au fonctionnement de l'API de l'application Skolengo.
 *  - Cette librairie ne se suffit pas √† elle-m√™me pour fonctionner. Il est n√©cessaire de l'importer dans un projet et l'utilisateur est le seul responsable de son code et des √©ventuelles cons√©quences.
 *  - Tout utilisateur de cette librairie a *a priori* lu l'enti√®ret√© du fichier de licence GPLv3 disponible publiquement [LICENSE](https://github.com/maelgangloff/scolengo-api/blob/master/LICENSE) ainsi que de ce pr√©sent fichier de pr√©sentation.
 *  - Tout utilisateur de cette librairie a *a priori* lu l'enti√®ret√© du code de ce projet avant toute utilisation.
 *  - Eu √©gard l'ensemble de ces remarques, les contributeurs et *a fortiori* l'auteur du projet ne peuvent √™tre tenus comme responsables de tout dommage potentiel.
 */
export class Skolengo {
  private httpClient: AxiosInstance
  private oidClient: Client
  public readonly school: School
  public tokenSet: TokenSet

  /**
   * Il est possible de s'authentifier en poss√©dant au pr√©lable des jetons OAuth 2.0
   * @example ```js
   * const {Skolengo, TokenSet} = require('scolengo-api')
   *
   * Skolengo.searchSchool('Lyc√©e Louise Weiss').then(async schools => {
   *   if(!schools.data.length) throw new Error("Aucun √©tablissement n'a √©t√© trouv√©.")
   *   const school = schools.data[0]
   *   const oidClient = await Skolengo.getOIDClient(school)
   *
   *   // üö® ATTENTION: Ne communiquez jamais vos jetons √† un tiers. Ils vous sont strictement personnels. Si vous pensez que vos jetons ont √©t√© d√©rob√©s, r√©voquez-les imm√©diatement.
   *
   *   const tokenSet = new TokenSet({
   *     access_token: 'ACCESS_TOKEN',
   *     id_token: 'ID_TOKEN',
   *     refresh_token: 'REFRESH_TOKEN',
   *     token_type: 'bearer',
   *     expires_at: 1681486899,
   *     scope: 'openid'
   *   })
   *
   *   const user = new Skolengo(oidClient, school, tokenSet)
   *   const infoUser = await user.getUserInfo()
   *   console.log(`Correctement authentifi√© sous l'identifiant ${infoUser.data.id}`)
   * })
   *
   * ```
   * @param {Client} oidClient Un client OpenID Connect
   * @param {School} school Etablissement
   * @param {TokenSet} tokenSet Jetons d'authentification Open ID Connect
   */
  public constructor (oidClient: Client, school: School, tokenSet: TokenSet) {
    this.oidClient = oidClient
    this.school = school
    this.tokenSet = tokenSet
    this.httpClient = axios.create({
      baseURL: BASE_URL,
      withCredentials: true,
      headers: {
        Authorization: `Bearer ${tokenSet.access_token}`,
        'X-Skolengo-Date-Format': 'utc',
        'X-Skolengo-School-Id': school.id,
        'X-Skolengo-Ems-Code': school.attributes.emsCode
      }
    })
  }

  /**
   * Informations sur l'utilisateur actuellement authentifi√© (nom, pr√©nom, date de naissance, adresse postale, courriel, t√©l√©phone, permissions, ...)
   * @param {string|undefined} userId Identifiant de l'utilisateur
   */
  public async getUserInfo (userId?: string): Promise<SkolengoResponse<User, UserIncluded>> {
    return (await this.request<SkolengoResponse<User, UserIncluded>>({
      url: `/users-info/${userId ?? this.tokenSet.claims().sub}`,
      responseType: 'json',
      params: {
        /*
        fields: {
          userInfo: 'lastName,firstName,photoUrl,externalMail,mobilephone,permissions',
          school: 'name,timeZone,subscribedServices',
          legalRepresentativeUserInfo: 'addressLines,postalCode,city,country,students',
          studentUserInfo: 'className,dateOfBirth,regime,school',
          student: 'firstName,lastName,photoUrl,className,dateOfBirth,regime,school'
        },
        */
        include: 'school,students,students.school'
      }
    })
    ).data
  }

  /**
   * Statut des services d'√©valuation (identifiant des p√©riodes, ...)
   * @param {string} studentId Identifiant d'un √©tudiant
   */
  public async getEvaluationSettings (studentId: string): Promise<SkolengoResponse<EvaluationSettings[], EvaluationSettingsIncluded>> {
    return (await this.request<SkolengoResponse<EvaluationSettings[], EvaluationSettingsIncluded>>({
      url: '/evaluations-settings',
      responseType: 'json',
      params: {
        filter: {
          'student.id': studentId
        },
        include: 'periods,skillsSetting,skillsSetting.skillAcquisitionColors'
        /*
        fields: {
          evaluationsSetting: 'periodicReportsEnabled,skillsEnabled,evaluationsDetailsAvailable',
          period: 'label,startDate,endDate',
          skillsSetting: 'skillAcquisitionLevels,skillAcquisitionColors',
          skillAcquisitionColors: 'colorLevelMappings'
        }
        */
      }
    })
    ).data
  }

  /**
   * R√©cup√©rer les notes d'un √©tudiant sur une p√©riode
   * @param {string} studentId Identifiant d'un √©tudiant
   * @param {string} periodId Identifiant de la p√©riode de notation
   */
  public async getEvaluation (studentId: string, periodId: string): Promise<SkolengoResponse<Evaluation[], EvaluationIncluded>> {
    return (await this.request<SkolengoResponse<Evaluation[], EvaluationIncluded>>({
      url: '/evaluation-services',
      responseType: 'json',
      params: {
        filter: {
          'student.id': studentId,
          'period.id': periodId
        },
        include: 'subject,evaluations,evaluations.evaluationResult,evaluations.evaluationResult.subSkillsEvaluationResults,evaluations.evaluationResult.subSkillsEvaluationResults.subSkill,evaluations.subSkills,teachers'
        /*
        fields: {
          evaluationService: 'coefficient,average,studentAverage,scale',
          subject: 'label,color',
          evaluation: 'dateTime,coefficient,average,scale,evaluationResult,subSkills',
          evaluationResult: 'mark,nonEvaluationReason,subSkillsEvaluationResults',
          subSkillEvaluationResult: 'level,subSkill',
          teacher: 'firstName,lastName,title',
          subSkill: 'shortLabel'
        }
        */
      }
    })
    ).data
  }

  /**
   * R√©cup√©rer le d√©tail d'une note d'un √©tudiant
   * @param {string} studentId Identifiant d'un √©tudiant
   * @param {string} markId Identifiant de la note
   */
  public async getEvaluationDetail (studentId: string, markId: string): Promise<SkolengoResponse<EvaluationDetail, EvaluationDetailIncluded>> {
    return (await this.request<SkolengoResponse<EvaluationDetail, EvaluationDetailIncluded>>({
      url: `/evaluations/${markId}`,
      responseType: 'json',
      params: {
        filter: {
          'student.id': studentId
        },
        include: 'evaluationService,evaluationService.subject,evaluationService.teachers,subSubject,subSkills,evaluationResult,evaluationResult.subSkillsEvaluationResults,evaluationResult.subSkillsEvaluationResults.subSkill'
        /*
        fields: {
          evaluationService: 'subject,teachers',
          subject: 'label,color',
          subSubject: 'label',
          evaluation: 'title,topic,dateTime,coefficient,min,max,average,scale',
          evaluationResult: 'subSkillsEvaluationResults,nonEvaluationReason,mark,comment',
          subSkill: 'shortLabel',
          subSkillEvaluationResult: 'level,subSkill',
          teacher: 'firstName,lastName,title'
        }
        */
      }
    })
    ).data
  }

  /**
   * R√©cup√©rer les donn√©es d'un devoir
   * @param {string} studentId Identifiant d'un √©tudiant
   * @param {string} homeworkId Identifiant du devoir
   */
  public async getHomeworkAssignment (studentId: string, homeworkId: string): Promise<SkolengoResponse<HomeworkAssignment, HomeworkAssignmentIncluded>> {
    return (await this.request<SkolengoResponse<HomeworkAssignment, HomeworkAssignmentIncluded>>({
      url: `/homework-assignments/${homeworkId}`,
      responseType: 'json',
      params: {
        include: 'subject,teacher,pedagogicContent,individualCorrectedWork,individualCorrectedWork.attachments,individualCorrectedWork.audio,commonCorrectedWork,commonCorrectedWork.attachments,commonCorrectedWork.audio,commonCorrectedWork.pedagogicContent,attachments,audio,teacher.person',
        filter: {
          'student.id': studentId
        }
      }
    })
    ).data
  }

  /**
   * R√©cup√©rer les devoirs d'un √©tudiant
   * @param {string} studentId Identifiant d'un √©tudiant
   * @param {string} startDate Date de d√©but - Format : YYYY-MM-DD
   * @param {string} endDate Date de fin - Format : YYYY-MM-DD
  */
  public async getHomeworkAssignments (studentId: string, startDate: string, endDate: string): Promise<SkolengoResponse<HomeworkAssignment[], HomeworkAssignmentIncluded>> {
    return (await this.request<SkolengoResponse<HomeworkAssignment[], HomeworkAssignmentIncluded>>({
      url: '/homework-assignments',
      responseType: 'json',
      params: {
        include: 'subject,teacher,attachments,teacher.person',
        filter: {
          'student.id': studentId,
          dueDate: {
            GE: startDate,
            LE: endDate
          }
        }
      }
    })
    ).data
  }

  /**
   * R√©cup√©rer toutes les actualit√©s de l'√©tablissement
   */
  public async getSchoolInfos (): Promise<SkolengoResponse<SchoolInfo[], SchoolInfoIncluded>> {
    return (await this.request<SkolengoResponse<SchoolInfo[], SchoolInfoIncluded>>({
      url: '/schools-info',
      responseType: 'json',
      params: {
        include: 'illustration,school,author,author.person,author.technicalUser,attachments'
      }
    })
    ).data
  }

  /**
   * R√©cup√©rer une actualit√© de l'√©tablissement
   * @param {string} schoolInfoId Identifiant d'une actualit√©
   */
  public async getSchoolInfo (schoolInfoId: string): Promise<SkolengoResponse<SchoolInfo, SchoolInfoIncluded>> {
    return (await this.request<SkolengoResponse<SchoolInfo, SchoolInfoIncluded>>({
      url: `/schools-info/${schoolInfoId}`,
      responseType: 'json',
      params: {
        include: 'illustration,school,author,author.person,author.technicalUser,attachments'
      }
    })
    ).data
  }

  /**
   * R√©cup√©rer les communication d'un dossier
   * @param {string} folderId Identifiant d'un dossier
   * @param {number|undefined} limit Nombre max d'√©l√©ments
   * @param {number|undefined} offset Offset
   */
  public async getCommunicationsFolder (folderId: string, limit = 10, offset = 0): Promise<SkolengoResponse<Communication[], CommunicationIncluded>> {
    return (await this.request<SkolengoResponse<Communication[], CommunicationIncluded>>({
      url: '/communications',
      responseType: 'json',
      params: {
        filter: {
          'folders.id': folderId
        },
        include: 'lastParticipation,lastParticipation.sender,lastParticipation.sender.person,lastParticipation.sender.technicalUser',
        page: { limit, offset }
      }
    })
    ).data
  }

  /**
   * R√©cup√©rer les participations d'un fil de discussion (communication)
   * @param {string} communicationId Identifiant d'une communication
   */
  public async getCommunicationParticipations (communicationId: string): Promise<SkolengoResponse<Participation[], ParticipationIncluded>> {
    return (await this.request<SkolengoResponse<Participation[], ParticipationIncluded>>({
      url: `communications/${communicationId}/participations`,
      responseType: 'json',
      params: {
        include: 'sender,sender.person,sender.technicalUser,attachments'
      }
    })
    ).data
  }

  /**
   * R√©cup√©rer les informations du service de communication (identifiants des dossiers, ...)
   * @param {string|undefined} userId Identifiant d'un utilisateur
   */
  public async getUsersMailSettings (userId?: string): Promise<SkolengoResponse<UsersMailSettings, UsersMailSettingsIncluded>> {
    return (await this.request<SkolengoResponse<UsersMailSettings, UsersMailSettingsIncluded>>({
      url: `/users-mail-settings/${userId ?? this.tokenSet.claims().sub}`,
      params: {
        include: 'signature,folders,folders.parent,contacts,contacts.person,contacts.personContacts'
        /*
        fields: {
          personContact: 'person,linksWithUser',
          groupContact: 'label,personContacts,linksWithUser',
          person: 'firstName,lastName,title,photoUrl',
          userMailSetting: 'maxCharsInParticipationContent,maxCharsInCommunicationSubject',
          signature: 'content',
          folder: 'name,position,type,parent'
        }
        */
      },
      responseType: 'json'
    })
    ).data
  }

  /**
   * R√©voquer un jeton
   * @param {Client} oidClient Un client OpenID Connect
   * @param {string} token Un jeton
   */
  public static async revokeToken (oidClient: Client, token: string): Promise<undefined> {
    return oidClient.revoke(token)
  }

  /**
   * Configuration actuelle de l'application mobile (derni√®re version d√©ploy√©e, derni√®re version support√©e, ...)
   * @example ```js
   * const {Skolengo} = require('scolengo-api')
   *
   * Skolengo.getAppCurrentConfig().then(config => {
   *   console.log(`Derni√®re version d√©ploy√©e: ${config.data.attributes.latestDeployedSkoAppVersion}`)
   *   console.log(`Derni√®re version support√©e: ${config.data.attributes.latestSupportedSkoAppVersion}`)
   * })
   * ```
   */
  public static async getAppCurrentConfig (): Promise<SkolengoResponse<CurrentConfig>> {
    return (await axios.request<SkolengoResponse<CurrentConfig>>({
      baseURL: BASE_URL,
      url: '/sko-app-configs/current',
      method: 'get',
      responseType: 'json'
    })).data
  }

  /**
   * Rechercher un √©tablissement scolaire
   * @param {string} text Le nom partiel de l'√©tablissement
   * @param {number} limit Nombre max d'√©l√©ments
   * @param {number} offset Offset
   * @example ```js
   * const {Skolengo} = require('scolengo-api')
   *
   * Skolengo.searchSchool('Lyc√©e Louise Weiss').then(schools => {
   *   console.log(schools)
   * })
   * ```
   */
  public static async searchSchool (text: string, limit = 10, offset = 0): Promise<SkolengoResponse<Array<School>>> {
    return (await axios.request<SkolengoResponse<School[]>>({
      baseURL: BASE_URL,
      url: '/schools',
      method: 'get',
      responseType: 'json',
      params: {
        page: { limit, offset },
        filter: { text }
      }
    })).data
  }

  /**
   * Cr√©er un client Open ID Connect permettant l'obtention des jetons (refresh token et access token)
   * @param {School} school L'√©tablissement scolaire
   * @example ```js
   * const {Skolengo} = require('scolengo-api')
   *
   * Skolengo.searchSchool('Lyc√©e Louise Weiss').then(async schools => {
   *   if(!schools.data.length) throw new Error("Aucun √©tablissement n'a √©t√© trouv√©.")
   *   const school = schools.data[0]
   *   const oidClient = await Skolengo.getOIDClient(school, 'skoapp-prod://sign-in-callback')
   *   console.log(oidClient.authorizationUrl())
   *   // Lorsque l'authentification est effectu√©e, le CAS redirige vers le callback indiqu√© avec le code. Ce code permet d'obtenir les refresh token et access token (cf. m√©canismes OAuth 2.0 et OID Connect)
   * })
   * ```
   * ```js
   * const {Skolengo} = require('scolengo-api')
   *
   * Skolengo.searchSchool('Lyc√©e Louise Weiss').then(async schools => {
   *   if(!schools.data.length) throw new Error("Aucun √©tablissement n'a √©t√© trouv√©.")
   *   const school = schools.data[0]
   *   const oidClient = await Skolengo.getOIDClient(school, 'skoapp-prod://sign-in-callback')
   *
   *   const params = oidClient.callbackParams('skoapp-prod://sign-in-callback?code=OC-9999-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-X')
   *   const tokenSet = await oidClient.callback('skoapp-prod://sign-in-callback', params)
   *   // üö® ATTENTION: Ne communiquez jamais vos jetons √† un tiers. Ils vous sont strictement personnels. Si vous pensez que vos jetons ont √©t√© d√©rob√©s, r√©voquez-les imm√©diatement.
   *
   *   const user = new Skolengo(oidClient, school, tokenSet)
   *   const infoUser = await user.getUserInfo()
   *   console.log(`Correctement authentifi√© sous l'identifiant ${infoUser.data.id}`)
   * })
   * ```
   */
  public static async getOIDClient (school: School, redirectUri = 'skoapp-prod://sign-in-callback'): Promise<Client> {
    const skolengoIssuer = await Issuer.discover(school.attributes.emsOIDCWellKnownUrl)
    const client = new skolengoIssuer.Client({
      client_id: Buffer.from(OID_CLIENT_ID, 'base64').toString('ascii'),
      client_secret: Buffer.from(OID_CLIENT_SECRET, 'base64').toString('ascii'),
      redirect_uris: [redirectUri],
      response_types: ['code']
    })
    return client
  }

  /**
   * Cr√©er un client Skolengo √† partir d'un objet contenant les informations d'authentification.
   * Cet objet de configuration peut √™tre g√©n√©r√© √† partir de l'utilitaire [scolengo-token](https://github.com/maelgangloff/scolengo-token)
   * @param {AuthConfig} config Informations d'authentification
   * @example ```js
   * const {Skolengo} = require('scolengo-api')
   * const config = require('./config.json')
   * const user = await Skolengo.fromConfigObject(config)
   * ```
   * ```js
   * const {Skolengo} = require('scolengo-api')
   * const config = {
   *   "tokenSet": {
   *     "access_token": "<access_token_here>",
   *     "id_token": "<id_token_here>",
   *     "refresh_token": "RT-<refresh_token_here>",
   *     "token_type": "bearer",
   *     "expires_at": 1234567890,
   *     "scope": "openid"
   *   },
   *   "school": {
   *     "id": "SKO-E-<school_id>",
   *     "type": "school",
   *     "attributes": {
   *       "name": "<school_name>",
   *       "addressLine1": "<school_address>",
   *       "addressLine2": null,
   *       "addressLine3": null,
   *       "zipCode": "<school_zip_code>",
   *       "city": "<school_city>",
   *       "country": "France",
   *       "homePageUrl": "<cas_login_url>",
   *       "emsCode": "<school_ems_code>",
   *       "emsOIDCWellKnownUrl": "<school_ems_oidc_well_known_url>"
   *     }
   *   }
   * }
   * Skolengo.fromConfigObject(config).then(async user => {
   *   const infoUser = await user.getUserInfo()
   *   console.log(`Correctement authentifi√© sous l'identifiant ${infoUser.data.id}`)
   * })
   * ```
   */
  public static async fromConfigObject (config: AuthConfig): Promise<Skolengo> {
    const oidClient = await Skolengo.getOIDClient(config.school)
    const tokenSet = new TokenSet(config.tokenSet as TokenSetParameters)
    return new Skolengo(oidClient, config.school, tokenSet)
  }

  /**
   * Effectuer une requ√™te authentifi√©e aupr√®s de l'API.
   * Si la requ√™te √©choue, on rafraichit le jeton et on retente.
   * @param {AxiosRequestConfig} config
   * @private
   */
  private async request<T = any, R = AxiosResponse<T>, D = any> (config: AxiosRequestConfig): Promise<R> {
    try {
      return await this.httpClient.request<T, R, D>(config)
    } catch {
      const tokenSet = await this.oidClient.refresh(this.tokenSet.refresh_token as string)
      this.tokenSet = tokenSet
      this.httpClient.defaults.headers.common.Authorization = `Bearer ${tokenSet.access_token}`
      return await this.httpClient.request<T, R, D>(config)
    }
  }
}
